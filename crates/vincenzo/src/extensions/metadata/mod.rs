//! Types for the Metadata protocol codec.
//!
//! <http://www.bittorrent.org/beps/bep_0009.html>

mod codec;

// re-exports
pub use codec::*;

use bendy::{
    decoding::{self, Decoder, FromBencode, Object, ResultExt},
    encoding::{Encoder, ToBencode},
};
use int_enum::IntEnum;

use crate::{error::Error, extensions::ExtMsg};

use super::super::error;

/// Metadata dict used in the Metadata protocol messages,
/// this dict is used to request, reject, and send data (info).
#[derive(Debug, Clone, PartialEq)]
pub struct Metadata {
    pub msg_type: MetadataMsgType,
    pub piece: u64,
    pub total_size: Option<u64>,
    pub payload: Vec<u8>,
}

impl ExtMsg for Metadata {
    /// This is the ID of the client for the metadata extension.
    const ID: u8 = 3;
}

impl TryInto<Vec<u8>> for Metadata {
    type Error = bendy::encoding::Error;

    fn try_into(self) -> Result<Vec<u8>, Self::Error> {
        self.to_bencode()
    }
}

#[derive(Clone, Debug, Copy, Ord, PartialOrd, Eq, PartialEq, Hash, Default)]
pub struct MetadataPiece(pub usize);

impl From<MetadataPiece> for usize {
    fn from(value: MetadataPiece) -> Self {
        value.0
    }
}

impl From<&MetadataPiece> for usize {
    fn from(value: &MetadataPiece) -> Self {
        value.0
    }
}

#[repr(u8)]
#[derive(Copy, Clone, Debug, PartialEq, IntEnum)]
pub enum MetadataMsgType {
    Request = 0,
    Response = 1,
    Reject = 2,
}

impl Metadata {
    pub fn request(piece: u64) -> Self {
        Self {
            msg_type: MetadataMsgType::Request,
            piece,
            total_size: None,
            payload: Vec::new(),
        }
    }

    pub fn data(piece: u64, info: &[u8]) -> Result<Self, error::Error> {
        let metadata = Self {
            msg_type: MetadataMsgType::Response,
            piece,
            total_size: Some(info.len() as u64),
            payload: info.to_vec(),
        };

        Ok(metadata)
    }

    pub fn reject(piece: u64) -> Self {
        Self {
            msg_type: MetadataMsgType::Reject,
            piece,
            total_size: None,
            payload: Vec::new(),
        }
    }
}

impl FromBencode for Metadata {
    // this is never used, just to make the code compile, this fn is required
    // for the `from_bencode` to work.
    fn decode_bencode_object(_object: Object) -> Result<Self, decoding::Error>
    where
        Self: Sized,
    {
        Ok(Self {
            payload: Vec::new(),
            msg_type: MetadataMsgType::Reject,
            piece: 0,
            total_size: None,
        })
    }

    fn from_bencode(bytes: &[u8]) -> Result<Self, decoding::Error>
    where
        Self: Sized,
    {
        let mut msg_type = 0;
        let mut piece = 0;
        let mut total_size = None;
        let mut payload: Vec<u8> = Vec::new();

        for (i, byte) in bytes.windows(2).enumerate() {
            if byte == [101, 101] {
                payload.extend_from_slice(&bytes[i + 2..]);
                break;
            }
        }

        let mut dict_decoder = Decoder::new(bytes);
        let mut obj =
            dict_decoder.next_object()?.unwrap().try_into_dictionary()?;

        while let Some(pair) = obj.next_pair()? {
            match pair {
                (b"msg_type", value) => {
                    msg_type =
                        u8::decode_bencode_object(value).context("msg_type")?;
                }
                (b"piece", value) => {
                    piece =
                        u64::decode_bencode_object(value).context("piece")?;
                }
                (b"total_size", value) => {
                    total_size = u64::decode_bencode_object(value)
                        .context("total_size")
                        .map(Some)?;
                }
                _ => {}
            }
        }

        Ok(Self {
            msg_type: msg_type.try_into().map_err(|_| Error::BencodeError)?,
            piece,
            total_size,
            payload,
        })
    }
}

impl ToBencode for Metadata {
    const MAX_DEPTH: usize = 20;

    // this is never used, just to make the code compile, this fn is required
    // for the `to_bencode` to work.
    fn encode(
        &self,
        _encoder: bendy::encoding::SingleItemEncoder,
    ) -> Result<(), bendy::encoding::Error> {
        Ok(())
    }

    fn to_bencode(&self) -> Result<Vec<u8>, bendy::encoding::Error> {
        let mut encoder = Encoder::new();

        encoder.emit_dict(|mut e| {
            e.emit_pair(b"msg_type", self.msg_type as u8)?;
            e.emit_pair(b"piece", self.piece)?;
            if let Some(total_size) = self.total_size {
                e.emit_pair(b"total_size", total_size)?;
            };
            Ok(())
        })?;

        let mut r = encoder.get_output()?;
        r.extend(self.payload.clone());

        Ok(r)
    }
}

#[cfg(test)]
mod tests {
    use crate::metainfo::Info;

    use super::*;

    #[test]
    fn metadata_from_payload() {
        let buf: [u8; _] = [
            // header
            // 0x00, 0x00, 0x05, 0x5b, 0x14, 0x03,
            0x64, 0x38, 0x3a, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
            0x69, 0x31, 0x65, 0x35, 0x3a, 0x70, 0x69, 0x65, 0x63, 0x65, 0x69,
            0x30, 0x65, 0x31, 0x30, 0x3a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
            0x73, 0x69, 0x7a, 0x65, 0x69, 0x31, 0x33, 0x32, 0x35, 0x65, 0x65,
            0x64, 0x31, 0x36, 0x3a, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73,
            0x65, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x33, 0x32,
            0x3a, 0x35, 0x39, 0x63, 0x63, 0x64, 0x36, 0x30, 0x63, 0x64, 0x63,
            0x39, 0x66, 0x33, 0x36, 0x66, 0x38, 0x39, 0x62, 0x65, 0x63, 0x37,
            0x31, 0x37, 0x32, 0x63, 0x65, 0x30, 0x31, 0x37, 0x38, 0x66, 0x66,
            0x36, 0x3a, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x69, 0x39, 0x31,
            0x31, 0x36, 0x32, 0x39, 0x36, 0x37, 0x39, 0x65, 0x34, 0x3a, 0x6e,
            0x61, 0x6d, 0x65, 0x38, 0x36, 0x3a, 0x4b, 0x61, 0x69, 0x6a, 0x75,
            0x2e, 0x4e, 0x6f, 0x2e, 0x38, 0x2e, 0x53, 0x30, 0x32, 0x45, 0x30,
            0x34, 0x2e, 0x54, 0x68, 0x65, 0x2e, 0x4d, 0x61, 0x6e, 0x2e, 0x43,
            0x61, 0x6c, 0x6c, 0x65, 0x64, 0x2e, 0x49, 0x73, 0x61, 0x6f, 0x2e,
            0x53, 0x68, 0x69, 0x6e, 0x6f, 0x6d, 0x69, 0x79, 0x61, 0x2e, 0x31,
            0x30, 0x38, 0x30, 0x70, 0x2e, 0x4e, 0x46, 0x2e, 0x57, 0x45, 0x42,
            0x2d, 0x44, 0x4c, 0x2e, 0x41, 0x41, 0x43, 0x32, 0x2e, 0x30, 0x2e,
            0x48, 0x2e, 0x32, 0x36, 0x34, 0x2d, 0x56, 0x41, 0x52, 0x59, 0x47,
            0x2e, 0x6d, 0x6b, 0x76, 0x31, 0x32, 0x3a, 0x70, 0x69, 0x65, 0x63,
            0x65, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x69, 0x31, 0x36,
            0x37, 0x37, 0x37, 0x32, 0x31, 0x36, 0x65, 0x36, 0x3a, 0x70, 0x69,
            0x65, 0x63, 0x65, 0x73, 0x31, 0x31, 0x30, 0x30, 0x3a, 0x71, 0x12,
            0x23, 0x82, 0x6f, 0x19, 0x12, 0xff, 0x02, 0x86, 0xec, 0x08, 0xbc,
            0x99, 0x03, 0xf7, 0x59, 0xcd, 0x30, 0xf0, 0xbd, 0xb5, 0xde, 0x5b,
            0x64, 0xeb, 0xea, 0xd3, 0x56, 0x6a, 0xce, 0x4a, 0x58, 0x16, 0xba,
            0x19, 0x85, 0x07, 0x0e, 0xec, 0x32, 0x39, 0x4b, 0xe0, 0xaa, 0x02,
            0x73, 0x1c, 0x76, 0xa9, 0x3c, 0x25, 0x7a, 0x02, 0xaa, 0x73, 0xd4,
            0x7f, 0x7c, 0x58, 0x9f, 0x84, 0xad, 0xc8, 0xb1, 0x24, 0x6d, 0xb1,
            0xdc, 0x1b, 0xf2, 0xb0, 0x93, 0xdb, 0x12, 0x73, 0x98, 0xd1, 0xb8,
            0xe2, 0xd4, 0x0e, 0x3a, 0x7e, 0x18, 0x63, 0x91, 0x7b, 0xcb, 0xdd,
            0xe3, 0x72, 0xfd, 0x33, 0x5b, 0xe9, 0x64, 0xd0, 0xc8, 0x99, 0xd3,
            0xe2, 0x72, 0x32, 0xac, 0x4e, 0x93, 0xbd, 0x0b, 0x01, 0x55, 0x82,
            0x03, 0xd5, 0x28, 0x3f, 0xf6, 0xb5, 0xbf, 0xfc, 0x34, 0xfb, 0x46,
            0xc0, 0x88, 0xb7, 0xa7, 0x8f, 0x1d, 0xa0, 0x95, 0x6e, 0xb8, 0xcf,
            0xa2, 0x89, 0xf5, 0x09, 0x1b, 0xb8, 0x01, 0xbf, 0x31, 0x47, 0x7d,
            0x8b, 0x78, 0xb2, 0x19, 0x5e, 0x17, 0x39, 0x59, 0xe0, 0x01, 0x54,
            0x53, 0x47, 0x8f, 0xda, 0xd2, 0x0b, 0x23, 0x3b, 0x96, 0xb0, 0xfe,
            0x2a, 0xec, 0x20, 0x08, 0x36, 0x41, 0x96, 0x40, 0xf3, 0x02, 0x32,
            0x8a, 0xde, 0x94, 0x94, 0xba, 0xb0, 0xae, 0xfd, 0xbb, 0xe8, 0x5a,
            0x6f, 0x83, 0xa8, 0x3b, 0xc5, 0xf8, 0x01, 0x87, 0x60, 0x96, 0x42,
            0x40, 0xdc, 0x7a, 0x17, 0xe8, 0x03, 0xdf, 0x28, 0xd6, 0x27, 0x0f,
            0xa0, 0xfc, 0x8a, 0xc5, 0xe4, 0x5f, 0x01, 0x8d, 0x94, 0xa6, 0xc2,
            0x39, 0xb7, 0x4b, 0xe7, 0x6f, 0x70, 0xba, 0x9b, 0x15, 0xf2, 0x35,
            0xe2, 0xbc, 0x06, 0x7c, 0x96, 0x3d, 0x6b, 0xf7, 0xee, 0xab, 0x6d,
            0x46, 0xe0, 0x7e, 0x39, 0x29, 0x9d, 0x0d, 0xf5, 0x9b, 0x5b, 0x18,
            0x74, 0x36, 0xe1, 0x7b, 0xbd, 0xda, 0x74, 0xdd, 0x89, 0xdb, 0x33,
            0x65, 0xb2, 0x12, 0xc1, 0xdd, 0x6e, 0xc3, 0xae, 0x30, 0xa3, 0xfc,
            0xc4, 0x3b, 0x3d, 0x0e, 0x18, 0xb6, 0x47, 0x9d, 0x1c, 0x68, 0x21,
            0x53, 0x8c, 0x5b, 0xbb, 0x4e, 0x24, 0xae, 0x08, 0x08, 0x7c, 0x95,
            0x73, 0x49, 0xdd, 0xee, 0xa5, 0x9b, 0x28, 0xeb, 0x38, 0xb3, 0xf1,
            0x1e, 0x93, 0x04, 0x76, 0x00, 0x14, 0xf3, 0x61, 0xaa, 0x0d, 0x45,
            0x33, 0x26, 0x27, 0x7f, 0xc2, 0x2c, 0x87, 0x98, 0xc4, 0x8e, 0xfa,
            0xd2, 0x2c, 0xfb, 0x35, 0x56, 0xb5, 0x1f, 0xb5, 0x4d, 0xcb, 0x7d,
            0x3a, 0x65, 0x07, 0x3a, 0xb4, 0x21, 0x54, 0x12, 0xf7, 0x83, 0xe2,
            0x3a, 0x75, 0xcd, 0x6a, 0x02, 0x8e, 0x79, 0xa7, 0xd9, 0xab, 0xbd,
            0x74, 0x3b, 0x5c, 0x25, 0x8d, 0x41, 0xde, 0xef, 0xf3, 0x59, 0xf1,
            0x7e, 0x4d, 0x12, 0x6b, 0xdd, 0x08, 0xf1, 0xe2, 0x41, 0xdb, 0x07,
            0xe9, 0xc4, 0xa5, 0x39, 0xcf, 0x93, 0x95, 0x69, 0x05, 0xf0, 0x96,
            0xef, 0x15, 0x4a, 0x9c, 0xd5, 0x8b, 0x74, 0x83, 0x43, 0x23, 0x06,
            0x56, 0x97, 0x25, 0x1c, 0x99, 0x22, 0xe4, 0x35, 0x0f, 0x6f, 0x86,
            0xc4, 0xae, 0xb7, 0x6f, 0x55, 0x75, 0x57, 0xa3, 0xa8, 0x4a, 0x2c,
            0xf5, 0x34, 0xde, 0xd1, 0x45, 0x6b, 0xdd, 0x69, 0x09, 0xbf, 0x1b,
            0xbb, 0xde, 0x52, 0x07, 0xab, 0x97, 0x99, 0xe4, 0x04, 0x0c, 0x54,
            0x05, 0x55, 0xe4, 0xb8, 0x6e, 0xfe, 0x10, 0x4c, 0xa2, 0x24, 0xf9,
            0x49, 0x78, 0x14, 0xa1, 0x18, 0xc8, 0x7d, 0x80, 0x0b, 0x0e, 0x7a,
            0xac, 0xef, 0xaf, 0x11, 0x81, 0x1c, 0x89, 0x44, 0xdd, 0xd4, 0x63,
            0xac, 0x53, 0xdc, 0xd5, 0xa6, 0x2a, 0xa7, 0x5a, 0xde, 0xbf, 0x51,
            0x17, 0xa9, 0xcb, 0xa0, 0xe1, 0x26, 0xb6, 0x2c, 0x71, 0x29, 0x9b,
            0xcf, 0x5a, 0x2d, 0x20, 0x79, 0xb4, 0x8f, 0xd4, 0xc7, 0x41, 0x5c,
            0xbe, 0x32, 0xd3, 0x8b, 0x98, 0xb8, 0x22, 0x32, 0x0c, 0x01, 0x1f,
            0xc5, 0x59, 0xef, 0x0d, 0xf7, 0xa3, 0x69, 0xab, 0x6d, 0x26, 0xe9,
            0x45, 0x0d, 0x13, 0x7c, 0xcd, 0xf3, 0x0f, 0xab, 0x49, 0x6a, 0xe0,
            0xa6, 0x46, 0x00, 0xa5, 0x9b, 0xb8, 0x4b, 0x87, 0xa2, 0x3a, 0x13,
            0x61, 0x1c, 0x37, 0x3c, 0x88, 0xc1, 0x87, 0x25, 0x8d, 0x4b, 0x1b,
            0xc0, 0xfa, 0xfe, 0x11, 0x97, 0x6a, 0x4e, 0x45, 0x03, 0xaa, 0x93,
            0x7c, 0x13, 0xa8, 0x31, 0xdc, 0x5a, 0x0f, 0x66, 0x82, 0xab, 0x4c,
            0x2f, 0xb6, 0x8e, 0x0e, 0x6a, 0x83, 0x2b, 0x46, 0xe2, 0x87, 0x94,
            0x45, 0xa5, 0x77, 0x83, 0x19, 0x6a, 0x58, 0x13, 0x1d, 0x65, 0x93,
            0x7e, 0xb3, 0x69, 0xe8, 0xd4, 0x32, 0xd6, 0xf5, 0xc3, 0xf5, 0x3e,
            0x82, 0x59, 0x66, 0xfc, 0x80, 0xe0, 0x35, 0x55, 0xfe, 0x08, 0x11,
            0x42, 0x77, 0xd0, 0xc1, 0x88, 0x51, 0x4c, 0xd9, 0xc2, 0x00, 0x55,
            0x05, 0x85, 0xf2, 0xe7, 0xbf, 0x3f, 0x8c, 0x90, 0xa8, 0xab, 0xbd,
            0xfe, 0x3c, 0x5c, 0x2c, 0x75, 0x2d, 0x2f, 0xf6, 0xe5, 0x79, 0xe0,
            0x06, 0xa8, 0xae, 0x59, 0x4a, 0x67, 0x7d, 0x5d, 0xc4, 0x12, 0x86,
            0x5d, 0xb1, 0xbf, 0x73, 0x50, 0x28, 0x97, 0x94, 0x21, 0x58, 0xd4,
            0x47, 0x41, 0xd8, 0xb3, 0x9d, 0xd9, 0xef, 0x9f, 0xbf, 0x3d, 0x41,
            0x64, 0x65, 0xb4, 0x4d, 0x2d, 0xfe, 0xea, 0x69, 0x94, 0x90, 0xbc,
            0xa3, 0x57, 0xb7, 0xba, 0x9a, 0x95, 0x31, 0x63, 0xde, 0xcb, 0x8f,
            0x49, 0x37, 0xab, 0x3a, 0x6c, 0x07, 0x1b, 0x15, 0xed, 0x2b, 0xf6,
            0x51, 0xef, 0xc4, 0x12, 0x69, 0x74, 0xd4, 0xc8, 0xc5, 0xa7, 0xf6,
            0x03, 0xa8, 0xd2, 0x0a, 0xe3, 0x6d, 0x83, 0xbc, 0xf9, 0x32, 0xb6,
            0x04, 0x12, 0x2f, 0x0a, 0xc9, 0xd9, 0xba, 0x0a, 0xaa, 0x6f, 0xc3,
            0x95, 0x81, 0x8a, 0x8c, 0x5d, 0x5f, 0xfe, 0xe9, 0xcf, 0xed, 0x12,
            0xe7, 0x7a, 0xab, 0x29, 0xa6, 0x33, 0x3b, 0xbd, 0xd9, 0xdf, 0x15,
            0xd6, 0xad, 0x84, 0x70, 0x23, 0x2c, 0x68, 0xe6, 0x35, 0xc8, 0x8d,
            0xb2, 0x0e, 0xac, 0xfc, 0xf8, 0xaf, 0xa5, 0xe8, 0xc8, 0x70, 0x21,
            0xf5, 0x37, 0xaf, 0xda, 0xe4, 0xac, 0x5c, 0x15, 0x9d, 0xfa, 0x0b,
            0x61, 0xb7, 0x20, 0xfb, 0x9f, 0xd4, 0x42, 0x3a, 0x2f, 0x55, 0xe8,
            0x19, 0x6a, 0x89, 0xc6, 0xa4, 0xf9, 0x23, 0x48, 0xa3, 0x82, 0x6d,
            0xa9, 0xdf, 0x92, 0x90, 0x85, 0x9c, 0x22, 0x94, 0x5d, 0xd8, 0xdf,
            0x3b, 0xfa, 0x0b, 0xf3, 0x0a, 0x0b, 0x11, 0xae, 0xbb, 0x64, 0xa1,
            0x50, 0xf6, 0xbf, 0xd3, 0x13, 0xba, 0x77, 0x7b, 0x41, 0x23, 0xa8,
            0xc0, 0x29, 0x50, 0xa3, 0xd5, 0x6f, 0x2c, 0x82, 0x65, 0xab, 0xfb,
            0x83, 0xf5, 0x27, 0x26, 0xbb, 0x04, 0x70, 0x16, 0x62, 0xdc, 0x68,
            0x97, 0x2e, 0x48, 0x92, 0xa8, 0xb6, 0xcf, 0xe0, 0x5f, 0x50, 0x8c,
            0x8c, 0x39, 0xe4, 0x89, 0x30, 0xd9, 0x62, 0xd5, 0x96, 0xfd, 0x72,
            0xce, 0x3d, 0xa6, 0x47, 0xe0, 0x36, 0x46, 0x12, 0xfd, 0x01, 0x43,
            0xd0, 0x9a, 0xa8, 0x21, 0x96, 0x8f, 0xd0, 0xe1, 0x99, 0x6e, 0x56,
            0xf0, 0xba, 0x96, 0x2c, 0x89, 0xed, 0x61, 0xee, 0xfe, 0x63, 0x3d,
            0xef, 0x39, 0x83, 0xdd, 0xd6, 0x3f, 0x2a, 0xc9, 0x0b, 0x1b, 0x88,
            0x10, 0x91, 0x75, 0x73, 0x27, 0xf2, 0x8a, 0xea, 0x6e, 0x43, 0xef,
            0xe7, 0xab, 0xa3, 0x48, 0xfa, 0xd5, 0x7b, 0x0a, 0x7e, 0x79, 0x9e,
            0x08, 0x45, 0x7b, 0xa0, 0x6b, 0x44, 0x2e, 0x2b, 0x12, 0x38, 0x7a,
            0x67, 0x31, 0xef, 0x8a, 0x7e, 0x13, 0xdc, 0xc4, 0x39, 0x02, 0x11,
            0xcd, 0xe9, 0x04, 0x55, 0x1b, 0x9f, 0x6f, 0xf7, 0x0c, 0x00, 0x21,
            0xde, 0x1b, 0x90, 0x42, 0xba, 0x3a, 0x32, 0x87, 0x27, 0x0b, 0xa4,
            0x88, 0x01, 0xb6, 0xf9, 0xf5, 0xed, 0x8f, 0x8f, 0x98, 0x03, 0x11,
            0x08, 0x43, 0xa5, 0xfd, 0xd3, 0xeb, 0x38, 0xe1, 0x09, 0x90, 0x59,
            0xae, 0x5a, 0x80, 0x59, 0x80, 0xc4, 0x73, 0xcf, 0x2b, 0x69, 0x79,
            0x28, 0x80, 0x34, 0x0b, 0x95, 0xd2, 0x22, 0xc6, 0x0a, 0x41, 0x32,
            0xc9, 0x85, 0xc9, 0x4c, 0xe1, 0xc8, 0x25, 0x78, 0x62, 0x31, 0xe3,
            0x59, 0xf2, 0x73, 0xe3, 0xb7, 0xc1, 0x4c, 0x5a, 0xee, 0x36, 0x3a,
            0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x37, 0x3a, 0x6e, 0x79, 0x61,
            0x61, 0x2e, 0x73, 0x69, 0x65,
        ];
        let metadata = Metadata::from_bencode(&buf).unwrap();
        assert_eq!(metadata.msg_type, MetadataMsgType::Response);
        assert_eq!(metadata.piece, 0);
        assert_eq!(metadata.total_size, Some(1325));
        assert_eq!(metadata.payload.len(), 1325);

        let info = Info::from_bencode(&metadata.payload).unwrap();
        assert_eq!(info.source, Some("nyaa.si".to_string()));
        assert_eq!(
            info.cross_seed_entry,
            Some([
                53, 57, 99, 99, 100, 54, 48, 99, 100, 99, 57, 102, 51, 54, 102,
                56, 57, 98, 101, 99, 55, 49, 55, 50, 99, 101, 48, 49, 55, 56,
                102, 102
            ])
        );
        assert_eq!(info.file_length, Some(911629679));
        assert_eq!(info.metadata_size, None);
        assert_eq!(info.source, Some("nyaa.si".to_string()));

        println!("{info:?}");
    }

    #[test]
    fn metadata_with_payload() {
        let mut raw = b"d8:msg_typei1e5:piecei2e10:total_sizei34256ee".to_vec();

        let payload = [0, 0, 0, 0, 0, 0, 0, 0];
        raw.extend(payload);

        println!("{:?}", String::from_utf8(raw.clone()));

        let dict = Metadata::from_bencode(&raw).unwrap();
        assert_eq!(dict.piece, 2);
        assert_eq!(dict.msg_type, MetadataMsgType::Response);
        assert_eq!(dict.total_size, Some(34256));
        assert_eq!(dict.payload, payload.to_vec());

        let bytes = dict.to_bencode().unwrap();

        assert_eq!(bytes, raw);
    }

    #[test]
    fn metadata_request() {
        let meta = Metadata::request(2);
        let bencoded = meta.to_bencode().unwrap();
        let raw = b"d8:msg_typei0e5:piecei2ee".to_vec();
        assert_eq!(bencoded, raw);
    }
}
